<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用在线IDE搭建Hexo博客并部署到GitHub]]></title>
      <url>http://deargray.github.io/2016/09/20/deploy-hexo-with-c9/</url>
      <content type="html"><![CDATA[<p>前一天在本地折腾许久，最后虽然成功把博客部署到GitHub上了，但还是有一些瑕疵，估计是本地折腾插件搞出来的。<br>白天刷知乎的时候，看到有一个用在线IDE保存代码，方便随时随地不限电脑更新博客的，晚上回来果断试验。<br><a id="more"></a></p>
<h2 id="Cloud9介绍"><a href="#Cloud9介绍" class="headerlink" title="Cloud9介绍"></a>Cloud9介绍</h2><p><img src="http://code.csdn.net/openkb/pic/entry_1390833543426/pictures/logo_cloud9.png" alt="Cloud9"><br>首先介绍神器 <code>Cloud9</code> | <a href="https://c9.io" target="_blank" rel="external">c9.io</a>，原<a href="http://lengthmin.com/2016/05/21/use-hexo-with-webide/" target="_blank" rel="external">博文</a>还用了另一个类似 <code>GitHub</code> 的托管仓库 <code>Coding</code> | <a href="https://coding.net" target="_blank" rel="external">coding.net</a>，中文的，有兴趣的可以研究研究。</p>
<blockquote>
<p>Cloud9 IDE是一款是由ajax.org发起的开源在线开发环境，后端为Node.js，前端采用Javascript和HTML5写成。支持的语言有HTML、CSS、PHP、Java、Ruby等23种编程语言。使用Cloud9 IDE，可以线上保存代码，且随时随地进行访问，这大大提升了效率，更加方便团队之间的协作。</p>
</blockquote>
<p>简直就像多了一个虚拟机，虽然只有开发模式。</p>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>注册是大家都懂的事，之所以提出来说，是因为注册过程有点特殊，而且百度的一些结果都不是新的注册界面。<br>前面几步都好说，邮箱、昵称、用户名……一步一步输入并确认就好。<br>倒数第二步要求输入银行卡信息。这个右边有解释说是用来做身份验证，并不是要收取费用，除非你想用收费服务。因为没有提示，只看图片标志，应该是不支持银联卡，恰好我有个从来没用过的 <code>VISA</code> 信用卡，就用来注册了。银联卡可用不并未研究，请自行验证。<br><strong>重要的是最后一步</strong>，起初走了两遍流程到这个地方都卡住了，说是没有完成验证。想起原博说 <code>Cloud9</code> 的验证是用的国外服务器，就连了 <code>VPN</code> 直接后退一步，试图偷懒少输入一次信用卡信息。实践证明，偷懒是不可取的，再到最后一步依然没反应。刷新整个页面重新走一遍注册流程，最后一步出了验证标志，注册成功。</p>
<h2 id="新建workspace"><a href="#新建workspace" class="headerlink" title="新建workspace"></a>新建workspace</h2><p>这个其实没什么好说的，登录后，点击右上角 <code>+</code> 号，创建workspace就是了。<br>和 <code>GitHub</code> 创建新仓库还是有一点像的，只是会多出选择代码模板的选项，咱们这里直接选择 <code>Blank</code> 就行。以后做其他项目有需求，选择相应的模板就好了。<br>workspace建好后打开，IDE有三种模式，我用的是 <code>Full</code> 模式，因为直接有 <code>Terminal</code> 在右下方，省得多窗口切换。如果用极简的话，面签那里的 <code>+</code> 号在打开新面签的时候，是可以选择类型的。<br>系统模式是有三种可选的，我自己本地电脑是 <code>WIN</code>，所以IDE选了 <code>LINUX</code>，有兴趣的也可以选 <code>OSX</code></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>这个和<a href="https://deargray.github.io/2016/09/19/deve-hexo-with-github/">上一篇博客</a>的安装过程相同，只是IDE已经集成了 <code>Git</code> 和 <code>Node.js</code>，可以省去这两步直接从 <code>Hexo</code> 的安装开始。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">mkdir blog</div><div class="line">cd blog</div><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>不过测试安装结果的地方要变一下，因为 <code>Cloud9</code> 只支持 <code>8080</code> <code>8081</code> <code>8082</code> 三个端口，且 <code>8080</code> 已被占用，而 <code>Hexo</code> 的默认预览端口是 <code>4000</code>，所以在预览的时候应如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -p 8082</div></pre></td></tr></table></figure></p>
<p>其后点击 <code>Terminal</code> 里给出的预览地址就可以预览了。<br>因为之前已经有经验了，到这里我就直接下载了新的主题 <code>Yelee</code> | <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>因为觉得这个样式更多一些。</p>
<h3 id="安装并配置主题"><a href="#安装并配置主题" class="headerlink" title="安装并配置主题"></a>安装并配置主题</h3><p>上一篇没有写主题，这一篇就补上吧。<br>首先，选择一个自己的喜欢的<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题</a>。一般主题链接里都是安装及配置方法，用得比较广的主题，还可能会有相关的使用说明，比如 <code>Yelee</code> 作者<a href="http://moxfive.xyz/" target="_blank" rel="external">MOxFIVE的博客</a>。以 <code>Yelee</code> 为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure></p>
<p>修改 <code>Hexo</code> 主目录下的 <code>_config.yml</code> 文件中的 <code>theme</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yelee</div></pre></td></tr></table></figure></p>
<p>请记住，这里务必写成小写的 <code>yelee</code>。开始因为想当然的，写成了 <code>Yelee</code>，一直预览不成功，生成的html文件都是空文件，折腾了许久。<br>之后的一些配置，请参考我上面给出的链接。</p>
<h2 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h2><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>前一天没有研究这个，今天重新部署，就顺便看了下。<br><code>Cloud9</code> 的 <code>SSH Keys</code> 是现成的，可以点击目录右上角的齿轮 -&gt; <code>Show Home in Favorites</code> 以及 <code>Show Hidden Files</code> 来查看并复制 <code>~/.ssh/id_rsa.pub</code>。也可以直接在个人页面，点击左侧的 <code>SSH Keys</code> 菜单，复制右侧显示的密钥。<br>打开 <code>GitHub</code>，打开 <code>Settings</code> 下的 <code>SSH and GPG keys</code> 页面，添加 <code>SSH密钥</code>。<br>配置完成后，可以在 <code>Terminal</code> 里测试配置结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>出现 <code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 即配置成功。</p>
<h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>有一点要注意的，请在生成之前进行 ‘clean’ 不然会将一些旧有的，比如明明你已经删掉了的原生 <code>Hello World</code> 一起部署到 <code>GitHub</code> 上。<br>首先记得要安装git的插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>部署动作可直接写成脚本文件 <code>git.sh</code> 放在主目录下执行 <code>. git.sh</code> 一步到位的执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash/</div><div class="line">#这里的目录是你的hexo目录的绝对路径。</div><div class="line">cd /home/ubuntu/workspace/blog/</div><div class="line">echo &quot;执行hexo clean&quot;</div><div class="line">hexo clean</div><div class="line">echo &quot;hexo clean 执行完毕&quot;</div><div class="line">echo &quot;推送源代码&quot;</div><div class="line">#下面三行是提交本地代码到GitHub用的，和部署博客不太一样，可根据需要使用</div><div class="line">#git start</div><div class="line">git add .</div><div class="line">git commit -am &quot;update&quot;</div><div class="line">git push hexo master</div><div class="line">#git end</div><div class="line">echo &quot;推送源代码 执行完毕&quot;</div><div class="line">echo &quot;执行hexo g -d&quot;</div><div class="line">hexo g -d</div><div class="line">echo &quot;hexo g -d 执行完毕&quot;</div></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>主题博大精深啊，这坑还是不要随便入的好。</li>
<li>我用SSH还是要每次输入账号密码，可能是添加的地方不对，改了地方今天再重新试一试。重新试过了，还是每次都要重新输入账号密码，原因不明，也可能是和C9这种模式有关。</li>
<li>C9真神器，不过今天升级了Chrome，打开特别缓慢，差点打不开了，还好在刷新了多次后一切正常了。</li>
<li>因为第一天部署博客踩了许多坑，一些乱七八糟的东西也传上去了，我又懒得一一分辨，就直接暴力删除仓库，又重新了个新的，比一个一个排查快速多了。</li>
<li>写博客超级费时间，以后大约会想起来才更新一次。对于Hexo的研究也暂时到此，最主要的，还是继续学习我的前端知识，提高技能等级。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub+Hexo个人博客搭建]]></title>
      <url>http://deargray.github.io/2016/09/19/deve-hexo-with-github/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>也许不能算作一个合格的程序员，因为业余时间懒得开电脑，自然也懒得写东西。<br>github是很早就注册了的，却一直没有用过。<br>从第一次接触电脑到现在，十多年，统共没写过多少文字发表在网上。跟风搞的博客、人人、小窝……通通都荒芜着。<br>但就学习来说，为了更好的掌握一门技能，输出是一个很好的途径。可以对自己已经掌握的做一个梳理，并能很好的掌控学习进度，规划学习目标。<br>上面说这么多题外话，只是想说明一下初衷：因为不想原地踏步，决定继续学习。首先，把github用起来，比如，建一个博客。<br>至于选择hexo，嗯，看的全栈教程是这么选择的，也就不费心思去比较各种博客框架了，毕竟，我的目的是在前端的道路上更进一步，而不是经营好一个完美博客，得分清主次。</p>
<p>好了，正文开始。<br>首先介绍一下，我用的是WIN7x64，在网上一堆OSX和LINUX中间显得有点突兀。不过前端嘛，支持IE，FF，Chrome就行。<br>然后搜教程的时候，好多都是非WIN系统的，好在原理相通，整个流程还算顺利。<br><a id="more"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="*注册GitHub"></a><span style="color: red;">*</span>注册GitHub</h3><p>直接去GitHub<a href="https://github.com" target="_blank" rel="external">官网</a>注册一个账号，和一般注册流程差不多。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="*安装Git"></a><span style="color: red;">*</span>安装Git</h3><p>前几天准备把GitHub重新打开的时候便已经装好了，用的是 <code>msysgit</code>。<br><code>msysgit</code> 是 <code>Git</code> 版本控制系统在 Windows 下的版本，可以从如下地址下载<span style="font-size: 8px;vertical-align: top;"><a href="#1">1</a></span>：<br><a href="https://git-for-windows.github.io" target="_blank" rel="external">下载地址1</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://git-scm.com/download/" target="_blank" rel="external">下载地址2</a><br>整个安装过程还是比较简单的，和平时安装软件差不多，具体可参考<a href="http://blog.csdn.net/aitangyong/article/details/51473584" target="_blank" rel="external">学习GitHub(一): windows7 64位系统安装msysGit客户端</a></p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="*安装Node.js"></a><span style="color: red;">*</span>安装Node.js</h3><p>到Node.js<a href="https://nodejs.org" target="_blank" rel="external">官网</a>下载相应平台的最新版本，一路安装即可。我下载的是最新版 <code>v6.6.0</code>，如不放心，可选择下载主页推荐的稳定版。</p>
<h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p><a href="http://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text 3</a>是比较常用的文本编辑器，支持各种编程语言和文件格式，当然也支持Markdown语法。非必须。</p>
<h2 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h2><p>Git及Node.js安装好后，便可以参考<a href="https://hexo.io" target="_blank" rel="external">官网</a>主页，直接执行如下命令安装Hexo。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p><code>-g</code> 是指将 <code>Hexo</code> 安装在全局目录下，可放在最后，也可放在 <code>install</code> 后面，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>另外，许多教程分享也用 <code>hexo</code>，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>用这个命令安装的不是最新版本，具体是哪个版本我也没有仔细研究。还是建议直接用 <code>hexo-cli</code> 安装最新版本，如果有具体版本需求，比如 <code>2.8.3</code>，也可用如下命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo@2.8.3 -g</div></pre></td></tr></table></figure></p>
<p>安装好后 <code>/usr/local/node/lib/node_modules</code> 目录下多了一个 <code>hexo-cli</code> 文件夹，随后测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Windows_NT 6.1.7601 win32 x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.6.0</div><div class="line">v8: 5.1.281.83</div><div class="line">uv: 1.9.1</div><div class="line">zlib: 1.2.8</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 57.1</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2h</div></pre></td></tr></table></figure></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>Hexo安装完成后<span style="font-size: 8px;vertical-align: top;"><a href="#2">2</a></span>， 执行init命令初始化hexo到你指定的目录，两种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>出现<code>INFO  Start blogging with Hexo!</code>便初始化成功了。<br>一些教程接下来还有一步，用 <code>npm install</code> 安装依赖和插件，不过我执行此命令的时候，并没有任何新的依赖和插件被安装。不放心的，可再执行一下此命令。</p>
<h3 id="启动服务器进行测试"><a href="#启动服务器进行测试" class="headerlink" title="启动服务器进行测试"></a>启动服务器进行测试</h3><p>在Hexo初始化目录下输入如下命令<span style="font-size: 8px;vertical-align: top;"><a href="#3">3</a></span>启动本地服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，成功的话即可看到博客页面。<br>至此，全部安装工作完成。</p>
<h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><h3 id="建立Repository"><a href="#建立Repository" class="headerlink" title="建立Repository"></a>建立Repository</h3><p>建立与用户名对应的仓库，仓库名必须为 <code>your_user_name.github.io</code>，固定写法<span style="font-size: 8px;vertical-align: top;"><a href="#4">4</a></span>，然后建立关联。<br>进入Hexo初始化目录，打开 <code>_config.yml</code> 文件，翻到最下面，如下修改来进行关联：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/your_user_name/your_user_name.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>执行如下命令进行Git部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>然后执行配置命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>运行完成，出现 <code>INFO  Deploy done: git</code> 后，在浏览器地址栏输入 <a href="https://your_user_name.github.io" target="_blank" rel="external">https://your_user_name.github.io</a> <span style="font-size: 8px;vertical-align: top;"><a href="#5">5</a></span>便可查看博客了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>Hexo与GitHub的关联还有一种SSH Key的方式，尚未实践。据说配置后不用再每次手动输入GitHub用户名及密码，后续进行一下配置。</li>
<li>Hexo有许多漂亮的主题，我下载了两款正在研究中，大家可自行搜索配置。另附<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a></li>
<li>关于<strong>Markdown</strong>的语法，可参考作业部落]的<a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，其<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">在线编辑器</a>也很好用，可以一边编辑一边预览。</li>
<li>后期可购买域名及服务器进一步探索。</li>
</ul>
<hr>
<p><span id="1">[1]: 用Chrome下载的时候特别慢，还总是下载到一半就失败了，用vpn翻墙也是一样。后来就直接用迅雷了，嗖嗖嗖就好了，推荐下。</span><br><span id="2">[2]: 安装结束后会有两行WARN提示，这是MAC OS X专用的依赖，是npm的已知Bug，忽略即可，具体可参考 <a href="https://github.com/npm/npm/issues/11632" target="_blank" rel="external">https://github.com/npm/npm/issues/11632</a></span><br><span id="3">[3]: hexo命令大多可简写为首字母，此处为server的简写，可参考 <a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="external">hexo常用命令笔记</a></span><br><span id="4">[4]: 尚未找到具体出处，怀疑可更改，待试验</span><br><span id="5">[5]: 请务必修改your_user_name为你本人的GitHub用户名</span></p>
]]></content>
    </entry>
    
  
  
</search>
